ALGORITHM :

1.Import sklearn.metrics.pairwise
2.Define a dictionary content_embeddings which stores pretrained vector representations for different content topics
3.Define user interests and embedding
4.Calculate content similarity by iterating content_embeddings using cosine_similarity.
5.The calculated similarities are stored in a list of tuples related_content
6.The related_content list is sorted by similarity in descending order using sort and reverse=True
7.Finally, suggested_content extracts only the content names from the sorted list, providing recommendations based on user interests.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


PROGRAM:

import math

content_embeddings = {
    'space exploration': [0.8, -0.3, 0.6],
    'astronomy': [0.7, -0.2, 0.8],
    'rocket technology': [0.6, -0.1, 0.7]
}

user_interests = ['space exploration', 'cosmic discoveries']
user_embedding = [0.75, -0.25, 0.7]  

def cosine_similarity_manual(vec1, vec2):
    dot_product = sum(a * b for a, b in zip(vec1, vec2))
    norm_vec1 = math.sqrt(sum(a * a for a in vec1))
    norm_vec2 = math.sqrt(sum(b * b for b in vec2))
    return dot_product / (norm_vec1 * norm_vec2)

related_content = []
for content, embedding in content_embeddings.items():
    similarity = cosine_similarity_manual(user_embedding, embedding)
    related_content.append((content, similarity))

related_content.sort(key=lambda x: x[1], reverse=True)
suggested_content = [content for content, _ in related_content]

print("Suggested content:", suggested_content)
OUTPUT:

Suggested content: ['astronomy', 'space exploration', 'rocket technology']

